publicフォルダ...画像やテキストなど静的ファイルを格納するディレクトリ
srcの中のapp...App Routerの中心になるディレクトリ

Reactの場合、ルーティングの機能が含まれていない
→Reactルーターなどの外部ライブラリを利用してルーティングを実現する必要あり
Next.jsの場合
→ルーティングが標準機能で入っている（2種類ある）
①Pagesルーター
②Appルーター（新しい方式）
→appディレクトリ配下ファイル構造に基づいてルーティングを決定する方法
→→ディレクトリ名がパスに対応している。各ディレクトリ内のtsxファイルが反映

pageコンポーネントはdefault exportする
動的ルーティング
→URLのパスに動的なパラメータを含めることができるルーティング
→ディレクトリ名を[]で囲んで、その中にパラメータ名を記述する
[id]

共通レイアウト機能
layout.tsx
→layout.tsxが定義されたディレクトリ以下の全てのページ上で共有される

ROOTGROUP
→アップディレクトリのファイルをグルーピングしたいが、URLのパスに影響させたくない時などに利用する
→→パスに反映させたくないディレクトリを（）で囲うだけ

クライアントコンポーネント(cc)
・従来のReactコンポーネントと同様
・クライアント側でレンダリングが行われる（ページにアクセスすると、サーバーからJSヶ送られて、ブラウザで実行することでレンダリングが行われる）
・ファイルの先頭に'use client'をつけて明示的に示す必要がある

サーバーコンポーネント
・サーバー側でレンダリングされている（Next.jsのデフォルト）
[メリット]
①パフォーマンスの向上（サーバー側で重い処理を実行できるため）
②JSのバンドルサイズを小さくできる
③トークンやAPIキーなどの機密データをクライアントに公開しない
→機密データを使用する処理をサーバー側で行うことでセキュリティ面の向上
④検索エンジンの最適化
[デメリット]
①クライアントコンポーネントでしか使用できない機能がある
-useStateやuseEffectなどのHooks
-onClickやonChangeなどのユーザーイベント
-ブラウザAPI
②初期ページ以外はクライアントコンポーネントの方が表示が早い可能性がある

使い分け
・基本はサーバーコンポーネント推奨
・以下のケースでクライアントコンポーネントを使用する
-useStateやuseEffectなどのHooks
-onClickやonChangeなどのユーザーイベント
-ブラウザAPI

☆クライアントコンポーネントはできるだけ小さなコンポーネントにする

確認方法
→console.logで文字列出力
→→サーバーコンポーネントの場合は、Next.jsを起動しているサーバーで実行される
→→クライアントコンポーネントではコンソールに出力される（起動しているサーバーでも表示されたりするが、これは開発環境であるため。本番の環境では起こらない）

ルートハンドラー
→バックエンドフレームワーク（expressなど）で開発していたAPIをNext.js上で直接開発するための機能
→appディレクトリのディレクトリ構造を利用して、APIのエンドポイントのパスを設定できる
APIを作成する場合はroute.tsとする必要がある

fetchのキャッシュ機能
→Next.jsのfetch関数はデフォルトでキャッシュを使用する機能を持っている

Next.jsはパフォーマンス向上のために可能な限りキャッシュを使用するように設計されているが、
データの更新頻度が高いアプリケーションを構築するためには注意が必要
ローディングコンポーネント
→データの取得など非同期処理を行なっている間に表示されるコンポーネント

Server Actions
→クライアント側から直接呼び出すことができるサーバー側の非同期処理のこと
→従来であればAPIを介してバックエンドに接続していた部分を、APIを介さずにクライアントからサーバー側に関数を直接実行することができるようになった
→→コードがシンプルになり、保守性が向上する
サーバーコンポーネントであれば同一ファイル内に直接記述することも可能ですが、可読性向上のために別ファイルに分けることを推奨
クライアントコンポーネントでは使用できない

useFormState
→サーバーが返す値をクライアント側でステートとして扱うことができるフック

rafce